に重要なコードスニペット:

コードスタイルと構造

- 簡潔で技術的な TypeScript コードを正確な例とともに記述します。
- クラスを避け、関数型および宣言型プログラミングパターンを使用します。
- コードの重複を避け、反復とモジュール化を優先します。
- isLoading、hasError などの補助動詞を含む記述的な変数名を使用します。
- ファイルの構造: エクスポートされたコンポーネント、サブコンポーネント、ヘルパー、静的コンテンツ、型。

命名規則

- ディレクトリには小文字とダッシュを使用します（例: components/auth-wizard）。
- コンポーネントには名前付きエクスポートを使用します。

TypeScript の使用

- すべてのコードに TypeScript を使用します。型よりもインターフェイスを優先します。
- 列挙型を避け、代わりにマップを使用します。
- TypeScript インターフェイスを持つ関数コンポーネントを使用します。

構文とフォーマット

- 純粋な関数には「function」キーワードを使用します。
- 条件文では不要な中括弧を避け、単純な文には簡潔な構文を使用します。
- 宣言型の JSX を使用します。

UI とスタイリング

- コンポーネントとスタイリングに Shadcn UI、Radix、Tailwind を使用します。
- Tailwind CSS を使用してレスポンシブデザインを実装します。モバイルファーストのアプローチを採用します。

パフォーマンスの最適化

- 'use client'、'useEffect'、'setState'を最小限に抑え、React Server Components（RSC）を優先します。
- クライアントコンポーネントを Suspense でラップし、フォールバックを設定します。
- 非クリティカルなコンポーネントのために動的ローディングを使用します。
- 画像の最適化: WebP 形式を使用し、サイズデータを含め、遅延読み込みを実装します。

主要な規則

- URL 検索パラメータの状態管理には 'nuqs' を使用します。
- Web Vitals（LCP、CLS、FID）を最適化します。
- 'use client'を制限します:
  - サーバーコンポーネントと Next.js SSR を優先します。
  - 小さなコンポーネントでの Web API アクセスにのみ使用します。
  - データの取得や状態管理には使用しないでください。

appディレクトリのファイル構造を使用してください。
データの取得、レンダリング、およびルーティングに関しては、Next.js のドキュメントに従ってください。
